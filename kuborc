#!/usr/bin/env python3
import setup
import subprocess
import sys
import traceback
from utils import (
    validate,
    get_message as msg,
    get_requirements,
    get_namespace,
    get_operation,
    get_host,
    get_existing_config,
    execute_prep,
)


# ================= DO NOT EDIT BEYOND THIS LINE =================

# ============ CONSTANTS ============

SETUP_CONFIG=setup.setup_config
APP_NAME=SETUP_CONFIG.get('APP_NAME','Application')


# ============ SCRIPT ============

try:
    # check if setup is already run
    if not validate.setup_config(APP_NAME):
        sys.exit(msg('SETUP_INCOMPLETE'))

    # start script
    print(msg('START').format(APP_NAME.upper()))

    # check if requirements are met
    REQUIREMENTS=get_requirements()
    if not REQUIREMENTS=="1":
        sys.exit(msg('REQUIREMENT_ERROR'))

    # get namespace
    NAMESPACE=get_namespace()

    # get operation
    OPERATION_DICT=get_operation()
    # unpack operation values
    PREP=OPERATION_DICT['PREP']
    DEPLOY=OPERATION_DICT['DEPLOY']
    UPDATE=OPERATION_DICT['UPDATE']
    DESTROY=OPERATION_DICT['DESTROY']

    # get host
    UNIQUE_ID_DICT=get_host(APP_NAME,NAMESPACE)
    # unpack host values
    BRAND_NAME=UNIQUE_ID_DICT['BRAND_NAME']
    MANIFEST_PATH=UNIQUE_ID_DICT['MANIFEST_PATH']
    # make config files dict
    CONFIG_NAME='.config-%s-%s' % (BRAND_NAME,NAMESPACE)
    CONFIG_FILE='config/'+CONFIG_NAME
    OLD_CONFIG_FILE='backup/'+CONFIG_NAME+'.old'
    CONFIG_FILES_DICT={'CONFIG_FILE':CONFIG_FILE,'OLD_CONFIG_FILE':OLD_CONFIG_FILE}
    # display host values
    print('CONFIG_FILE=%s' % CONFIG_FILE)
    print('BRAND_NAME=%s' % BRAND_NAME)
    print('MANIFEST_PATH=%s' % MANIFEST_PATH)

    # validate if manifest path is required
    if not validate.manifest_path(MANIFEST_PATH,OPERATION_DICT):
        sys.exit(msg('NOT_FOUND').format('Manifest Path'))

    # get existing config
    EXISTING_CONFIG=get_existing_config(CONFIG_FILES_DICT,OPERATION_DICT)

    # prep new config if prep is selected
    if PREP:
        execute_prep(UNIQUE_ID_DICT,OPERATION_DICT,EXISTING_CONFIG,CONFIG_FILES_DICT,APP_NAME)
    
    # execute operation
    if DEPLOY or UPDATE or DESTROY:
        if DEPLOY:
            BUILD_OPERATION='2'
        elif UPDATE:
            BUILD_OPERATION='3'
        else:
            BUILD_OPERATION='4'
        subprocess.run(['sh','./build.sh',APP_NAME,"%s" % str(MANIFEST_PATH),BRAND_NAME,BUILD_OPERATION,NAMESPACE,CONFIG_FILE,OLD_CONFIG_FILE])
except KeyboardInterrupt:
    error_message='\n'+msg('EXIT')
    sys.exit(error_message)
except Exception as e:
    # error_message=msg('ERROR').format(e)
    error_message=msg('ERROR').format(traceback.print_exc())
    sys.exit(error_message)

# end script
print(msg('END').format(APP_NAME.upper()))
